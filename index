<!--
 Amazon Cognito Auth SDK for JavaScript
 Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License").
 You may not use this file except in compliance with the License.
 A copy of the License is located at

         http://aws.amazon.com/apache2.0/

 or in the "license" file accompanying this file.
 This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions
 and limitations under the License.
-->

<!--
	Copy back to: index-cognito-new-callingAWS.html
	Changes from index-cognito-new.html:
	- added section to try and get AWS temp creds.
	- added script to reference aws api
-->

<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title>Cognito Auth JS SDK Sample</title>
    <meta charset="UTF-8" />
    <link rel="stylesheet" href="stylesheets/styleSheetStart.css" />
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    <script src="js/amazon-connect-v1.2.0-26.js"></script>
    <script src="js/amazon-cognito-auth.min.js"></script>
    <!-- <script src="js/aws-sdk-2.300.0.min.js"></script>
    <script src="js/aws-sdk.js"></script> -->
    <script src="js/aws-sdk-2.360.0.min.js"></script>
    <script src="call.js"></script>
    <script src="getapidata.js"></script>
    <!-- <script src="getapidata.js"></script> -->
    <!-- <script src="js/moment.min.js"></script> -->
    <!-- <script src="dynamodb.js"></script> -->

    <!-- <script type="text/javascript" src="lib/axios/dist/axios.standalone.js"></script>
    <script type="text/javascript" src="lib/CryptoJS/rollups/hmac-sha256.js"></script>
    <script type="text/javascript" src="lib/CryptoJS/rollups/sha256.js"></script>
    <script type="text/javascript" src="lib/CryptoJS/components/hmac.js"></script>
    <script type="text/javascript" src="lib/CryptoJS/components/enc-base64.js"></script>
    <script type="text/javascript" src="lib/url-template/url-template.js"></script>
    <script type="text/javascript" src="lib/apiGatewayCore/sigV4Client.js"></script>
    <script type="text/javascript" src="lib/apiGatewayCore/apiGatewayClient.js"></script>
    <script type="text/javascript" src="lib/apiGatewayCore/simpleHttpClient.js"></script>
    <script type="text/javascript" src="lib/apiGatewayCore/utils.js"></script>
    <script type="text/javascript" src="apigClient.js"></script> -->

    <script
      type="text/javascript"
      src="js/apiGateway-js-sdk/lib/axios/dist/axios.standalone.js"
    ></script>
    <script
      type="text/javascript"
      src="js/apiGateway-js-sdk/lib/CryptoJS/rollups/hmac-sha256.js"
    ></script>
    <script
      type="text/javascript"
      src="js/apiGateway-js-sdk/lib/CryptoJS/rollups/sha256.js"
    ></script>
    <script
      type="text/javascript"
      src="js/apiGateway-js-sdk/lib/CryptoJS/components/hmac.js"
    ></script>
    <script
      type="text/javascript"
      src="js/apiGateway-js-sdk/lib/CryptoJS/components/enc-base64.js"
    ></script>
    <script
      type="text/javascript"
      src="js/apiGateway-js-sdk/lib/url-template/url-template.js"
    ></script>
    <script
      type="text/javascript"
      src="js/apiGateway-js-sdk/lib/apiGatewayCore/sigV4Client.js"
    ></script>
    <script
      type="text/javascript"
      src="js/apiGateway-js-sdk/lib/apiGatewayCore/apiGatewayClient.js"
    ></script>
    <script
      type="text/javascript"
      src="js/apiGateway-js-sdk/lib/apiGatewayCore/simpleHttpClient.js"
    ></script>
    <script
      type="text/javascript"
      src="js/apiGateway-js-sdk/lib/apiGatewayCore/utils.js"
    ></script>
    <script
      type="text/javascript"
      src="js/apiGateway-js-sdk/apigClient.js"
    ></script>
  </head>

  <body onload="onLoad()">
    <ul>
      <!-- <li><a href="https://aws.amazon.com/cognito/" target="_blank" title="Go to AWS Cognito Console">Cognito Console</a></li>
        <li><a href="http://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html" target="_blank"
                title="See Cognito developer docs">Docs</a></li> -->
    </ul>

    <h1>
      <a href="https://www.dxc.technology/" target="_blank">
        <img
          src="img/dxclogo.png"
          alt="DXC Technology"
          title="DXC Technology"
          style="width:380px;height:180px;"/></a
      ><br />
      DXC Agile Service Desk
    </h1>

    <div class="centeredText">
      <h1 id="line"></h1>
      <!-- <p id="introPara" title="About this demo">
            This sample web page demonstrates how to use the Amazon Cognito Auth SDK for JavaScript.
            This SDK simplifies adding sign-up, sign-in functionality in your apps.
            With this SDK, you can use Cognito User Poolsâ€™ app integration and federation features,
            with a customizable UI hosted by AWS to sign up and sign in users, and with built-in federation
            for external identity providers via SAML.
            To learn more
            see our <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html">Developer
                Guide</a>.<br>
            <br>
            This sample will initialize a CognitoAuth object and initiate the sign up / sign in flow.
            You will need to substitute your own Cognito User Pool configuration values to make it work.
            Look at the source for this page and read the comments to learn more.
            You can also view the README.md of this sample page and the README.md of the Cognito Auth JavaScript SDK.
        </p> -->
    </div>

    <div><br /></div>
    <div>
      <p id="statusNotAuth" title="Status">
        Sign-In to Continue
      </p>
      <p id="statusAuth" title="Status">
        You have Signed-In
      </p>
    </div>

    <div class="tabsWell">
      <div id="startButtons">
        <div class="button">
          <a
            class="nav-tabs"
            id="signInButton"
            href="javascript:void(0)"
            title="Sign in"
            >Sign In</a
          >
        </div>
      </div>
      <div class="tab-content">
        <!-- <div class="tab-pane" id="userdetails">
               <p class="text-icon" title="Minimize" id="tabIcon" onclick="toggleTab('usertab');">_</p> 
                <br>
               <h2 id="usertabtitle">Tokens</h2>
                <div class="user-form" id="usertab">
                    <pre id="idtoken"> ... </pre>
                    <pre id="acctoken"> ... </pre>
                    <pre id="reftoken"> ... </pre>
                </div> 
            </div> -->
      </div>
    </div>
    <div class="center">
      <div id="statusDiv">
        <div id="agentGreetingDiv" style="padding: 5px;">
          <!-- say hi to the agent -->
        </div>
        <div id="agentStatusDiv" style="padding: 5px;"></div>
      </div>
      <div
        id="ccpContainer"
        style="text-align:center; height:465px; margin: 0 auto; width:320px "
      ></div>
      <fieldset class="contactAttributes border" style="display: none">
        <legend class="border">Contact Details</legend>
        <table id="attributesTable" class="attributesTable">
          <thead>
            <tr>
              <th>Attribute Name</th>

              <th>Attribute Value</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td></td>
              <td></td>
            </tr>
          </tbody>
        </table>
      </fieldset>
      <div id="logMsgsContainer" style="display: none">
        <h2>Log Messages</h2>
        <div id="logMsgs" style="height: 465px; overflow: auto;"></div>
      </div>
      <div id="eventMsgsContainer" style="display: none">
        <h2>Event Messages</h2>
        <div id="eventMsgs" style="height: 465px; overflow: auto;"></div>
      </div>
    </div>
    <script>
      var myWindow;

      // Operations when the web page is loaded.
      // checkWin();
      function onLoad() {
        // openWin();

      

        var i, items, tabs;
        items = document.getElementsByClassName("tab-pane");
        for (i = 0; i < items.length; i++) {
          items[i].style.display = "none";
        }
        document.getElementById("statusNotAuth").style.display = "block";
        document.getElementById("statusAuth").style.display = "none";
        // Initiatlize CognitoAuth object
        var auth = initCognitoSDK();
        auth.getSession();
        // document
        //   .getElementById("signInButton")
        //   .addEventListener("click", function() {
        //     userButton(auth);
        //   });
        var curUrl = window.location.href;
        auth.parseCognitoWebResponse(curUrl);
      }
      mySetTimeFunction();

      function mySetTimeFunction() {
        let  warningTime;
        let signoutTime ;
        setTimeout(function(){
           alert("Hello"); 
          }, 5000);
        // setTimeout = () => {
          
        //   var warnTimeout = setTimeout(this.warn, warningTime);
        //   var logoutTimeout = setTimeout(this.logout, signoutTime);
        // };
        // warn = () => {
        //   // this.setState({ open: true });
        //   setTimeout(() => {
        //     // this.setState({ open: false });
        //     this.logout();
        //   }, 5000);
        //   console.log("You will be logged out automatically in 1 minute.");
        // };

        // logout = () => {
        //   // Send a logout request to the API
        //   console.log("Sending a logout request to the API...");
        //   sessionStorage.setItem("timeout", true);
        //   // this.props.actions.reset();
        //   // this.props.history.push({
        //   //   pathname: "/Logout"
        //   // });
        // };
  // setTimeout(function(){ alert("Hello"); }, 3000);
}
      function openWin() {
        myWindow = window.open(
         // "https://dxc-ito-mws-nce-se-ccp.s3.eu-central-1.amazonaws.com/index.html"
          "https://dlh1qkjt8wbhh.cloudfront.net"
        );
      }

      function closeWin() {
        if (myWindow) {
          // alert("closed");
          myWindow.close();
        }
      }
      function checkWin() {
        if (!myWindow) {
          console.log("'myWindow' has never been opened!");
          // document.getElementById("msg").innerHTML = "'myWindow' has never been opened!";
        } else {
          if (myWindow.closed) {
            console.log("'myWindow' has been closed!");
            // document.getElementById("msg").innerHTML = "'myWindow' has been closed!";
          } else {
            console.log("'myWindow' has not been closed!");
            // document.getElementById("msg").innerHTML = "'myWindow' has not been closed!";
          }
        }
      }

      function onLoadWitoutSignin() {
        console.log("onloading");
        var i, items, tabs;
        items = document.getElementsByClassName("tab-pane");
        for (i = 0; i < items.length; i++) {
          items[i].style.display = "none";
        }
        document.getElementById("statusNotAuth").style.display = "block";
        document.getElementById("statusAuth").style.display = "none";
        // Initiatlize CognitoAuth object
        var auth = initCognitoSDK();
        auth.getSession();
        // userButton(auth);
        // document
        //   .getElementById("signInButton")
        //   .addEventListener("click", function() {

        //   });
        var curUrl = window.location.href;
        auth.parseCognitoWebResponse(curUrl);
      }

      // Operation when tab is closed.
      function closeTab(tabName) {
        // document.getElementById(tabName).style.display = 'none';
      }

      // Operation when tab is opened.
      function openTab(tabName) {
        // document.getElementById(tabName).style.display = 'block';
      }

      // Operations about toggle tab.
      // function toggleTab(tabName) {
      //     if (document.getElementById("usertab").style.display == 'none') {
      //         document.getElementById("usertab").style.display = 'block';
      //         document.getElementById("tabIcon").innerHTML = '_';
      //     } else {
      //         document.getElementById("usertab").style.display = 'none';
      //         document.getElementById("tabIcon").innerHTML = '+';
      //     }
      // }

      // Operations when showing message.
      function showMessage(msgTitle, msgText, msgDetail) {
        var msgTab = document.getElementById("message");
        document.getElementById("messageTitle").innerHTML = msgTitle;
        document.getElementById("messageText").innerHTML = msgText;
        document.getElementById("messageDetail").innerHTML = msgDetail;
        msgTab.style.display = "block";
      }

      // Perform user operations.
      function userButton(auth) {
        var state = document.getElementById("signInButton").innerHTML;
        if (state === "Sign Out") {
          document.getElementById("signInButton").innerHTML = "Sign In";
          auth.signOut();
          showSignedOut();
        } else {
          auth.getSession();
        }
      }

      // Operations when signed in.
      function showSignedIn(session) {
        closeTab("userdetails");
        document.getElementById("statusNotAuth").style.display = "block";
        document.getElementById("statusAuth").style.display = "none";
        // document.getElementById("statusNotAuth").style.display = 'block';
        // document.getElementById("statusAuth").style.display = 'none';
        // document.getElementById("statusNotAuth").style.display = 'none';
        // document.getElementById("statusAuth").style.display = 'block';
        document.getElementById("signInButton").innerHTML = "Sign Out";
        if (session) {
          var idToken = session.getIdToken().getJwtToken();
          if (idToken) {
            var payload = idToken.split(".")[1];
            var tokenobj = JSON.parse(atob(payload));
            var formatted = JSON.stringify(tokenobj, undefined, 2);
            // document.getElementById('idtoken').innerHTML = formatted;

            // document.getElementById('idtoken').innerHTML = " ... ";
            jsonData = JSON.parse(formatted);
            console.log("email = ", jsonData.email);
            // let stringData = JSON.stringify(jsonData);
            // getUserId = parsetoData(stringData)
            // localStorage.setItem("userId", jsonData.email);
          }
          var accToken = session.getAccessToken().getJwtToken();
          if (accToken) {
            var payload = accToken.split(".")[1];
            var tokenobj = JSON.parse(atob(payload));
            var formatted = JSON.stringify(tokenobj, undefined, 2);
            // document.getElementById('acctoken').innerHTML = formatted;

            // document.getElementById('acctoken').innerHTML = " ... ";
          }
          var refToken = session.getRefreshToken().getToken();
          if (refToken) {
            // console.log(" refToken.substring(1, 20);= ", refToken.substring(1, 20));
            // document.getElementById('reftoken').innerHTML = refToken.substring(1, 20);
            // document.getElementById('reftoken').innerHTML = " ... ";
          }
        }
        openTab("userdetails");
      }

      function parsetoData(jsondata) {
        let jsonparse = JSON.parse(jsondata);
        let jsonIdentities = jsonparse.identities;
        let identijson = JSON.stringify(jsonIdentities);
        console.log("identijson = ", identijson);
        let identiiesParse = JSON.parse(identijson);
        // console.log(identiiesParse[0].userId);
        let userId = identiiesParse[0].userId;
        return userId;
      }

      function federateIntoConnect(instancesId, instanceName) {
        console.log("> federateIntoConnect");
        AWS.config.region = "eu-central-1";
        var connectService = new AWS.Connect();
        // Define the connect instance that we are going to be federating into
        // NOTE:  The assumed role **must** ALLOW federation into this instance.
        //var connectService = new AWS.Connect();
        var params = {
          InstanceId: instancesId
        };

        // Get the federation token
        connectService.getFederationToken(params, function(err, data) {
          if (err) console.log(err, err.stack);
          // an error occurred
          else {
            // extract the tokens and log them
            let accessToken = data["Credentials"]["AccessToken"];
            let accessTokenExpiration = data["Credentials"][
              "AccessTokenExpiration"
            ].valueOf();
            let refreshToken = data["Credentials"]["RefreshToken"];
            let refreshTokenExpiration = data["Credentials"][
              "RefreshTokenExpiration"
            ].valueOf();

            console.log(
              "connectService.getFederationToken:\n" + JSON.stringify(data)
            );
            console.log("AccessToken: " + accessToken);
            //console.log("AccessTokenExpiration: " + accessTokenExpiration);
            console.log("RefreshToken: " + refreshToken);
            console.log("RefreshTokenExpiration: " + refreshTokenExpiration);
            // create a dict of the values - possibly use the returned Credentials object...
            var credentials = {};
            credentials["AccessToken"] = accessToken;
            credentials["AccessTokenExpiration"] = accessTokenExpiration;
            credentials["RefreshToken"] = refreshToken;
            credentials["RefreshTokenExpiration"] = refreshTokenExpiration;
            console.log("refesh time = ", msToTime(refreshTokenExpiration));
            // Note:  Trying to take a shortcut by using HTTP GET like below will not work.  Must POST.
            // var loginUrl = "https://pvillier-main-connect-cognito.awsapps.com/connect/auth/sign-in?" +
            // 	"AccessToken=" + accessToken + '&' +
            // 	"AccessTokenExpiration=" + accessTokenExpiration + '&' +
            // 	"RefreshToken=" + refreshToken + '&' +
            // 	"RefreshTokenExpiration=" + refreshTokenExpiration
            //     + '&' + "Credentials=" + JSON.stringify(credentials)
            // ;

            // Create and post a hidden form at the end of the DOM.
            var form = document.createElement("form");
            form.setAttribute("method", "post");
            // form.setAttribute("action", "https://dxcagileservicedesk.awsapps.com/connect/auth/sign-in?");
            let formUrl =
              "https://" + instanceName + ".awsapps.com/connect/auth/sign-in?";
            form.setAttribute("action", formUrl);
            var hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", "AccessToken");
            hiddenField.setAttribute("value", accessToken);
            form.appendChild(hiddenField);

            hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", "AccessTokenExpiration");
            hiddenField.setAttribute("value", accessTokenExpiration);
            form.appendChild(hiddenField);

            hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", "RefreshToken");
            hiddenField.setAttribute("value", refreshToken);
            form.appendChild(hiddenField);

            hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", "RefreshTokenExpiration");
            hiddenField.setAttribute("value", refreshTokenExpiration);
            form.appendChild(hiddenField);

            hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", "credentials");
            hiddenField.setAttribute("value", JSON.stringify(credentials));
            form.appendChild(hiddenField);

            // target a new window
            form.target = "ConnectWindow";

            document.body.appendChild(form);
            form.submit();
            // at this point a new window should appear and log you into Connect.

            // Connect CCP Integration - traditional code to add the iframed CCP into the current window.
            var container = document.getElementById("ccpContainer");
            // Need to hit federation url and this loads...
            // https://d-XXXXXXXXXX.awsapps.com/connect/ccp#/
            connect.core.initCCP(container, {
              ccpUrl: "https://"
                .concat(instanceName)
                .concat(".awsapps.com/connect/ccp#/"),
              // ccpUrl: 'https://'.concat("pvillier-main-connect-cognito").concat('.awsapps.com/connect/ccp#/'),
              loginPopup: false,
              softphone: {
                allowFramedSoftphone: true,
                disableRingtone: false
              }
            });
            connect.contact(subscribeToContactEvents);
            connect.agent(subscribeToAgentEvents);
          }
        });
      }

      // Operations when signed out.
      function showSignedOut() {
        document.getElementById("statusNotAuth").style.display = "block";
        document.getElementById("statusAuth").style.display = "none";
        // document.getElementById('idtoken').innerHTML = " ... ";
        // document.getElementById('acctoken').innerHTML = " ... ";
        // document.getElementById('reftoken').innerHTML = " ... ";
        localStorage.clear();
        localStorage.removeItem("lamUserId");
        localStorage.removeItem("userId");
        closeTab("userdetails");
      }

      async function getLiveAgentData(AgentData) {
        try {
          if ("Username" in AgentData && AgentData.Username != "") {
            var createParams = {
              TableName: "AgentLiveData",
              Key: {
                AgentName: AgentData.Username
              }
            };
            console.log("gett .", createParams);
            try {
              var docClient = new AWS.DynamoDB.DocumentClient();
              let createData = await docClient.get(createParams).promise();
              console.log("gett a new item...", createData);
              return createData;
            } catch (err) {
              console.log(" gett err=", err);
              if (err.includes("ExpiredTokenException")) {
                let refreshSignin = onLoadWitoutSignin();
                console.log("refreshsinf=");
              }
              console.log(" gett err=", err);
            }
          } else {
            console.log(" getteles no gett ");
          }
        } catch (err) {
          console.log(" gett err ", err);
          let refreshSignin = onLoadWitoutSignin();
        }
      }

      async function createLiveAgentData(AgentData) {
        if (
          "Username" in AgentData &&
          AgentData.Username != "" &&
          "Status" in AgentData &&
          AgentData.Status != "" &&
          "RoutingProfile" in AgentData &&
          AgentData.RoutingProfile != ""
        ) {
          var returned_totallogintime = "00";
          var returned_totalsincelasttime = "00";
          var returned_totalCalltime = "00";
          var returned_totalIdletime = "00";
          let setTime = "";
          let setCallTime = "";
          let setIdleTime = "";
          let str_TotalLoginTime = "00";
          let str_TotalCallTime = "00";
          let str_TotalIdleTime = "00";
          var returned_offlineTIme = "00";
          console.log("AgentData.StateDuration = ", AgentData.StateDuration);
          console.log("AgentData.AgentData.AgentStatus = ", AgentData.Status);
          // var emaiId = localStorage.getItem("userId");

          if (AgentData.Status === "AfterCallWork") {
            returned_totallogintime = AgentData.StateDuration;
          }

          if (AgentData.Status === "Busy") {
            returned_totallogintime =
              Number(returned_totallogintime) + Number(AgentData.StateDuration);
            returned_totalCalltime = AgentData.StateDuration;
          }
          if (AgentData.Status === "Available") {
            returned_totallogintime =
              Number(returned_totallogintime) + Number(AgentData.StateDuration);
            console.log(
              "AgentData.AgentData.returned_totallogintime = ",
              returned_totallogintime
            );
            // console.log("AgentData.AgentData.msToTime( returned_totallogintime ) = ",msToTime( returned_totallogintime ));
            returned_totalsincelasttime = AgentData.StateDuration;
            returned_totalIdletime =
              Number(returned_totalIdletime) + Number(AgentData.StateDuration);
          }
          if (AgentData.Status === "Offline") {
            returned_offlineTIme = AgentData.StateDuration;
          }
          if (localStorage.getItem("TotalLoginTime") === "") {
            // localStorage.removeItem("TotalLoginTime");
            if (returned_totallogintime != "NaN") {
              setTime = localStorage.setItem(
                "TotalLoginTime",
                returned_totallogintime
              );
            }
            str_TotalLoginTime = setTime;
            console.log("str_TotalLoginTime = ", str_TotalLoginTime);
          } else {
            console.log(
              "getLoginTime= ",
              localStorage.getItem("TotalLoginTime")
            );
            if (
              localStorage.getItem("TotalLoginTime") != null ||
              localStorage.getItem("TotalLoginTime") != NaN
            ) {
              str_TotalLoginTime =
                Number(localStorage.getItem("TotalLoginTime")) +
                Number(returned_totallogintime) -
                Number(returned_offlineTIme);
              console.log("str_TotalLoginTime= ", str_TotalLoginTime);
              localStorage.removeItem("TotalLoginTime");
            } else {
              str_TotalLoginTime =
                Number(returned_totallogintime) - Number(returned_offlineTIme);
            }
            if (returned_totallogintime != "NaN")
              setTime = localStorage.setItem(
                "TotalLoginTime",
                str_TotalLoginTime
              );
          }

          console.log(
            "localStorage.getItem(TotalCallTime = ",
            localStorage.getItem("TotalCallTime")
          );
          if (localStorage.getItem("TotalCallTime") === "") {
            // localStorage.removeItem("TotalLoginTime");
            if (returned_totalCalltime != "NaN") {
              setCallTime = localStorage.setItem(
                "TotalCallTime",
                returned_totalCalltime
              );
            }
            str_TotalCallTime = setCallTime;
            console.log("setCallTime = ", setCallTime);
          } else {
            console.log(
              "get llll Time= ",
              localStorage.getItem("TotalCallTime")
            );
            if (
              localStorage.getItem("TotalCallTime") != null ||
              localStorage.getItem("TotalCallTime") != NaN
            ) {
              str_TotalCallTime =
                Number(localStorage.getItem("TotalCallTime")) +
                Number(returned_totalCalltime);
              console.log("TotalCallTime= ", str_TotalCallTime);
              localStorage.removeItem("TotalCallTime");
            } else {
              str_TotalCallTime = Number(returned_totalCalltime);
            }
            if (returned_totalCalltime != "NaN")
              setCallTime = localStorage.setItem(
                "TotalCallTime",
                str_TotalCallTime
              );
          }
          console.log(
            "localStorage.getItem(TotalCallTime = ",
            localStorage.getItem("TotalIdleTime")
          );
          if (localStorage.getItem("TotalIdleTime") === "") {
            // localStorage.removeItem("TotalLoginTime");
            if (returned_totalIdletime != "NaN") {
              setIdleTime = localStorage.setItem(
                "TotalIdleTime",
                returned_totalIdletime
              );
            }
            str_TotalCallTime = setIdleTime;
            console.log("setCallTime = ", setIdleTime);
          } else {
            console.log(
              "get llll Time= ",
              localStorage.getItem("TotalIdleTime")
            );
            if (
              localStorage.getItem("TotalIdleTime") != null ||
              localStorage.getItem("TotalIdleTime") != NaN
            ) {
              str_TotalIdleTime =
                Number(localStorage.getItem("TotalIdleTime")) +
                Number(returned_totalIdletime);
              console.log("TotalIdleTime= ", str_TotalIdleTime);
              localStorage.removeItem("TotalIdleTime");
            } else {
              str_TotalIdleTime = Number(returned_totalIdletime);
            }
            if (returned_totalIdletime != "NaN")
              setIdleTime = localStorage.setItem(
                "TotalIdleTime",
                str_TotalIdleTime
              );
          }
          console.log(
            "msToTime(str_TotalCallTime)",
            msToTime(str_TotalCallTime)
          );
          console.log(
            "msToTime(str_TotalIdleTime)",
            msToTime(str_TotalIdleTime)
          );
          const { startTimestamp } = AgentData.state;
          const now = new Date();
          const nowTime = now.getTime();

          var Item = {
            AgentName: AgentData.Username,
            AgentStatus: AgentData.Status,
            RoutingProfile: AgentData.RoutingProfile,
            state: AgentData.state,
            startTimestamp: startTimestamp.toString(),
            AgentEmail: AgentData.Agent,
            // CallConnectedTimestamp: AgentData.CallConnectedTimestamp,
            // CallEndedTimestamp: AgentData.CallEndedTimestamp,
            StateDuration: AgentData.StateDuration,
            TotalLoginTime: msToTime(str_TotalLoginTime),
            TotalIdleTime: msToTime(returned_totalIdletime),
            TotalSinceLastCall: msToTime(returned_totalsincelasttime),
            TotalCallTime: msToTime(str_TotalCallTime),
            lastDetailsUpdate_nodeTime: nowTime,
            lastDetailsUpdate_char: now.toUTCString()
          };
          console.log("agent item =", JSON.stringify(Item));
          let resultLocal = localStorage.getItem("result");
          console.log("resultLocal =", resultLocal);
          let created = await createAgentLiveData(resultLocal, Item);
          console.log("created succef", created);
          // var createParams = {
          //   TableName: "AgentLiveData",
          //   Item: Item
          // };
          // console.log("Adding a new item...",  new Date().toLocaleTimeString() +" " +createParams );
          // // console.log("Adding a new item...", createParams);
          // try {
          //   var docClient = new AWS.DynamoDB.DocumentClient();
          //   let createData = await docClient.put(createParams).promise();
          //   console.log("createData a new item...", createData);
          // } catch (err) {
          //   console.log("err=", JSON.stringify(err));
          //   if (JSON.stringify(err).includes("ExpiredTokenException")) {
          //     let refreshSignin = onLoadWitoutSignin();
          //     console.log("refreshsinf=");
          //   }
          //   console.log("err=", err);
          // }
        } else {
          console.log("eles no add ");
        }
      }
      //    async function getUserconfigData(session, local_UserId) {
      //   // API gateway is dev-asd-backend-lambda-creds
      //   if (session) {
      //     var idToken = session.getIdToken().getJwtToken();
      //     localStorage.setItem('idToken', idToken);

      //     var params = {
      //       // "request" : prepareRequest("","","","1",local_UserId)
      //     };
      //     // var params = {};
      //     var body = {
      //       operation: "getUserconfigData",
      //       UserId: local_UserId
      //     };

      //     var additionalParams = {
      //       // add the cognito idtoken as an authorization parameter as this is required.
      //       headers: {
      //         Authorization: idToken
      //       },
      //       queryParams: {}
      //     };

      //     // make the authorized call to the API gateway
      //     try {
      //       var returnVal = await apigClient.mediatedConnectApiCallPost(
      //         params,
      //         body,
      //         additionalParams
      //       );
      //       return returnVal;
      //     } catch (err) {
      //       console.log("API call failure");
      //       console.log(err);
      //     }
      //     // END - See if we can call API gateway
      //   }
      // }
      function msToTime(duration) {
        var milliseconds = parseInt((duration % 1000) / 100),
          seconds = Math.floor((duration / 1000) % 60),
          minutes = Math.floor((duration / (1000 * 60)) % 60),
          hours = Math.floor((duration / (1000 * 60 * 60)) % 24);

        hours = hours < 10 ? "0" + hours : hours;
        minutes = minutes < 10 ? "0" + minutes : minutes;
        seconds = seconds < 10 ? "0" + seconds : seconds;

        return hours + ":" + minutes + ":" + seconds;
        // return hours + ":" + minutes + ":" + seconds + ":" + milliseconds;
      }
      // function callAPi(result,email){
      //   getUserconfig(result,email).then(UserResponse => {
      //               console.log("userresponse",UserResponse);
      //             });
      // }

      async function getConnectCredentials(session) {
        let returnValue = "Failure";
        console.debug("getConnectCredentials");
        if (session) {
          var idToken = session.getIdToken().getJwtToken();

          var apigClient = apigClientFactory.newClient();

          var params = {};
          var body = {};
          var additionalParams = {
            // add the cognito idtoken as an authorization parameter as this is required.
            headers: {
              Authorization: idToken
            }
          };

          // make the authorized call to the API gateway
          try {
            var credentials = await apigClient.connectCredentialsGet(
              params,
              body,
              additionalParams
            );
            console.log(
              "connectCredentialsGet return: " + JSON.stringify(credentials)
            );
            returnValue = credentials;
          } catch (err) {
            console.log("API call failure");
            console.log(err);
            const { config } = err;

            const { data } = config;
            console.log("error data=", data);
            if (data === "") {
              returnValue = "Session expired";
            }
          }
          // END - See if we can call API gateway
        }
        console.log("data=", returnValue);
        return returnValue;
      }

      // async function getUserconfig(session,local_UserId) {
      //   let returnValue = "Failure";
      //   console.debug("getConnectCredentials");
      //   if (session) {
      //     var idToken = session.getIdToken().getJwtToken();

      //     var apigClient = apigClientFactory.newClient();

      //     var params = {};
      //     // var body = {};
      //     var body = {
      //   operation: "getUserconfigData",
      //   UserId: local_UserId
      // };
      //     var additionalParams = {
      //       // add the cognito idtoken as an authorization parameter as this is required.
      //       headers: {
      //         Authorization: idToken
      //       }
      //     };

      //     // make the authorized call to the API gateway
      //     try {
      //       var credentials = await apigClient.mediatedConnectApiCallPost(
      //         params,
      //         body,
      //         additionalParams
      //       );
      //       console.log(
      //         "connectCredentialsGet return: " + JSON.stringify(credentials)
      //       );
      //       returnValue = credentials;
      //     } catch (err) {
      //       console.log("API call failure");
      //       console.log(err);
      //       const { config } = err;

      //       const { data } = config;
      //       console.log("error data=", data);
      //       if (data === "") {
      //         returnValue = "Session expired";
      //       }
      //     }
      //     // END - See if we can call API gateway
      //   }
      //   console.log("data=", returnValue);
      //   return returnValue;
      // }

      // Initialize a cognito auth object.

      function initCognitoSDK() {
        let authData = {
          ClientId: "33bjjvkbgdo1mdmtnmnk58vd0o", // Your client id here
          AppWebDomain: "dxcnceagileservicedesk.auth.eu-central-1.amazoncognito.com", // Exclude the "https://" part.
          TokenScopesArray: ["email", "openid", "profile"], // like ['openid','email','phone']...
          //RedirectUriSignIn: "http://dxc-ito-mws-nce-se-ccp.s3-website.eu-central-1.amazonaws.com/index.html"
          RedirectUriSignIn: "https://dlh1qkjt8wbhh.cloudfront.net",
          // "https://asd-authorization-ccp.s3.amazonaws.com/Agent-Live-CCP/baeagent.html",
          //RedirectUriSignOut: "http://dxc-ito-mws-nce-se-ccp.s3-website.eu-central-1.amazonaws.com/index.html"

          RedirectUriSignOut: "https://dlh1qkjt8wbhh.cloudfront.net",
          // "https://asd-authorization-ccp.s3.amazonaws.com/Agent-Live-CCP/baeagent.html",
          UserPoolId: "eu-central-1_oAuCfX8wM",
          // "us-east-1_JQ8OXywMv", //old pool ID
          AdvancedSecurityDataCollectionFlag: false
        };
        var auth = new AmazonCognitoIdentity.CognitoAuth(authData);
        localStorage.removeItem("result");
        // You can also set state parameter
        // auth.setState(<state parameter>);
        auth.userhandler = {
          onSuccess: function(result) {
            // show the idtoken and accesstoken
            console.log("result", result);
            showSignedIn(result);
            getConnectCredentials(result).then(credentials => {
              console.log("credentials", credentials);
              // console.log("credentials msg", credentials.data.message);
              if (credentials != "Session expired") {
                if (credentials.data.message != "Access denied") {
                  if ("Credentials" in credentials.data) {
                    const idToken = result.getIdToken().getJwtToken();
                    if (idToken) {
                      let payload = idToken.split(".")[1];
                      let tokenobj = JSON.parse(atob(payload));
                      let formatted = JSON.stringify(tokenobj, undefined, 2);
                      let responseData = JSON.parse(formatted);
                      const { email } = responseData;
                      // Users = new Person(email);
                      console.log("email = ", email);
                      AWS.config.region = "eu-central-1";
                      var credsArray = credentials.data.Credentials;

                      AWS.config.credentials = new AWS.Credentials(
                        credsArray["AccessKeyId"],
                        credsArray["SecretAccessKey"],
                        credsArray["SessionToken"]
                      );
                      // var idToken = session.getIdToken().getJwtToken();
                      localStorage.setItem("result", idToken);
                      //federateIntoConnect("instannane","instanceid");
                      federateIntoConnect("942508ef-e399-4167-b70d-ba23bc294e07",  "dxc-ito-mws-nce-se");
                    //   getUserconfig(result, email).then(UserResponse => {
                    //     console.log(
                    //       "userresponse",
                    //       UserResponse.data.response.ASD_Instance
                    //     );
                    //     let instaceNameandID =
                    //       UserResponse.data.response.ASD_Instance;
                    //     let spliteddata = instaceNameandID.split(",");
                    //     federateIntoConnect(spliteddata[0], spliteddata[1]);
                    //   });
                    // }
                  } else {
                    alert("Something went wrong");
                  }
                } else {
                  alert("Access denied");
                }
              } else {
                console.log("credi no = ");
                let refreshSign = onLoadWitoutSignin();
                // console.log(object);
              }

              // getConnectdata.getDynamoDBRecords(result);
              // getConnectdata.getUserLogin(result);
            });
           

            // for testing

            // call the API gateway - commented out as you will not have this but included for illustrative purposes.
          },
          onFailure: function(err) {
            alert("Error!" + err);
          }
        };
        return auth;
      }
    </script>
  </body>
</html>
